package shop.awesomejump.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import lombok.AllArgsConstructor;
import shop.awesomejump.domain.Paging;
import shop.awesomejump.domain.QnaDTO;
import shop.awesomejump.domain.QnaPageDTO;
import shop.awesomejump.service.IQnaDAO;

@Controller
@RequestMapping("/awesomejump/qna")
@AllArgsConstructor
public class QnaController {

	private static final Logger log = LoggerFactory.getLogger(QnaController.class);
	
	@Autowired
	private IQnaDAO service;
	
	@GetMapping("/list")
	public void list(Paging page, Model model) {
		
		log.info("list");
		
		model.addAttribute("list", service.getList(page));
		model.addAttribute("pageMaker", new QnaPageDTO(page, 123));
	}
	
	@PostMapping("/register")
	@PreAuthorize("isAuthenticated()")
	public String register(QnaDTO qDto, RedirectAttributes rttr) {
		
		System.out.println("register POST : " + qDto);
		
		log.info("register : " + qDto);
		
		int result = 0;
		
		result = service.register(qDto);
		
		if (result > 0) {
			System.out.println("등록성공");
		}
		
		rttr.addFlashAttribute("result", qDto.getQna_no());
		
		return "redirect:/awesomejump/qna/list";
	}
	
	@GetMapping("/register")
	@PreAuthorize("isAuthenticated()")
	public void register() {
		
	}
	
	@GetMapping("/read")
	public void get(@RequestParam("qna_no") int qna_no, Model model) {
		
		log.info("/read");
		
		model.addAttribute("qDto", service.get(qna_no));
	}
	
	@PostMapping("/modify")
	@PreAuthorize("isAuthenticated()")
	public String modiry(QnaDTO qDto, RedirectAttributes rttr) {
		
		log.info("modify : " + qDto);
		
		if (service.modify(qDto)) {
			rttr.addFlashAttribute("result", "수정되었습니다.");
		}
		
		return "redirect:awesomejump/qna/list";
	}
	
	@PostMapping("/remove")
	@PreAuthorize("isAuthenticated()")
	public String remove(@RequestParam("qna_no") int qna_no, RedirectAttributes rttr) {
		
		log.info("remove : " + qna_no);
		
		if (service.remove(qna_no)) {
			rttr.addFlashAttribute("result", "삭제되었습니다.");
		}
		
		return "redirect:awesomejump/qna/list";
	}
}
