package shop.awesomejump.controller;

import java.io.PrintWriter;
import java.util.List;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import net.sf.json.JSONArray;
import shop.awesomejump.domain.CategoryDTO;
import shop.awesomejump.domain.ProductDTO;
import shop.awesomejump.domain.ProductOptionDTO;
import shop.awesomejump.service.ICategoryDAO;
import shop.awesomejump.service.IOptionDAO;
import shop.awesomejump.service.IProductDAO;

@RequestMapping("/admin")
@Controller
public class ProductController {

	@Inject
	private ICategoryDAO cateDao;

	@Autowired
	private IProductDAO pDao;

	@Autowired
	private IOptionDAO oDao;

	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);

	// 상품 등록 GET
	@RequestMapping(value = "/insertProduct", method = RequestMethod.GET)
	public String insertProduct(Model model) throws Exception {
		System.out.println("insertProduct GET 호출");

		List<CategoryDTO> category = cateDao.category();

		System.out.println("insertProduct CategoryDTO ==> " + category);

		model.addAttribute("category", JSONArray.fromObject(category));

		System.out.println("insertProduct JSONArray ==> " + JSONArray.fromObject(category));

		return "/admin/insertProduct";
	}

	// 상품 등록 POST
	@RequestMapping(value = "/insertProduct", method = RequestMethod.POST)
	public String insertProduct(ProductDTO pDto, @RequestParam("product_option_color") String option_color,
			@RequestParam("product_option_size") String option_size,
			@RequestParam("category_main") String category_main, @RequestParam("category_mid") String category_mid,
			@RequestParam("category_sub") String category_sub, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes rttr) throws Exception {

		pDto.setCategory_main(category_main);
		pDto.setCategory_mid(category_mid);
		pDto.setCategory_sub(category_sub);

		System.out.println("insertProduct category_main ==> " + category_main);
		System.out.println("insertProduct category_mid ==> " + category_mid);
		System.out.println("insertProduct category_sub ==> " + category_sub);

		response.setContentType("text/html; charset=UTF-8");
		PrintWriter out = response.getWriter();

		int insertProduct = pDao.insertProduct(pDto);

		logger.info("insertProduct POST ProductDTO ==> " + pDto);

		ProductOptionDTO optionDto = new ProductOptionDTO();
		optionDto.setProduct_no(pDto.getProduct_no());
		optionDto.setProduct_option_color(option_color);
		optionDto.setProduct_option_size(option_size);

		int insertOption = oDao.insertOption(optionDto);

		if (insertProduct > 0 && insertOption > 0) {
			out.println("<script>alert('상품등록이 완료되었습니다.'); location.href='/admin/listProduct';</script>");
		} else {
			out.println("<script>alert('상품등록이 실패되었습니다.'); history.go(-1);</script>");
		}

		return "/admin/blank";
	}

	// 상품 목록 GET
	@RequestMapping(value = "/listProduct", method = RequestMethod.GET)
	public String listProduct(Model model) throws Exception {
		logger.info("listProduct GET 호출");

		List<ProductDTO> list = pDao.listProduct();

		model.addAttribute("list", list);

		return "/admin/listProduct";
	}

	// 상품 상세 정보 GET
	@RequestMapping(value = "/detailProduct", method = RequestMethod.GET)
	public void detailProduct(Model model, @RequestParam("product_no") int product_no) throws Exception {
		logger.info("detailProduct GET 호출");

		ProductDTO pDto = pDao.detailProduct(product_no);

		List<ProductOptionDTO> option = oDao.listOption(product_no);

		logger.info("detailProduct pDto ==> " + pDto);
		logger.info("detailProduct option ==> " + option);

		model.addAttribute("detail", pDto);
		model.addAttribute("option", option);

	}

	// 상품 수정 GET
	@RequestMapping(value = "/modifyProduct", method = RequestMethod.GET)
	public String modifyProduct(Model model, @RequestParam("product_no") int product_no) throws Exception {
		logger.info("modifyProduct GET 호출");
		System.out.println("modifyProduct product_no ==> " + product_no);

		ProductDTO pDto = pDao.detailProduct(product_no);
		List<ProductOptionDTO> option = oDao.listOption(product_no);

		model.addAttribute("modify", pDto);
		model.addAttribute("modifyOption", option);

		return "/admin/modifyProduct";
	}

	// 상품 수정 POST
	@RequestMapping(value = "/modifyProduct", method = RequestMethod.POST)
	public void modifyProduct(HttpServletResponse response, HttpServletRequest request, ProductDTO pDto,
			@RequestParam("product_option_color") String product_option_color,
			@RequestParam("product_option_size") String product_option_size) throws Exception {
		logger.info("modifyProduct POST 호출");
		System.out.println("modifyProduct ProductDTO ==> " + pDto);
		System.out.println("modifyProduct product_option_color ==> " + product_option_color);
		System.out.println("modifyProduct product_option_size ==> " + product_option_size);

		response.setContentType("text/html; charset=UTF-8");
		PrintWriter out = response.getWriter();

		int modifyProdut = pDao.modifyProduct(pDto);

		ProductOptionDTO oDto = new ProductOptionDTO();
		oDto.setProduct_no(pDto.getProduct_no());
		oDto.setProduct_option_color(product_option_color);
		oDto.setProduct_option_size(product_option_size);

		int modifyOption = oDao.modifyOption(oDto);

		if (modifyProdut > 0 && modifyOption > 0) {
			out.println("<script>alert('상품수정이 완료되었습니다.'); location.href='/admin/listProduct';</script>");
		} else {
			out.println("<script>alert('상품수정이 실패되었습니다.'); history.go(-1);</script>");
		}

	}


	
}
