package shop.awesomejump.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.imageio.ImageIO;
import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import net.coobird.thumbnailator.Thumbnails;
import net.sf.json.JSONArray;
import shop.awesomejump.domain.CategoryDTO;
import shop.awesomejump.domain.ProImageDTO;
import shop.awesomejump.domain.ProductDTO;
import shop.awesomejump.domain.ProductOptionDTO;
import shop.awesomejump.mapper.ProductMapper;
import shop.awesomejump.service.ICategoryDAO;
import shop.awesomejump.service.IOptionDAO;
import shop.awesomejump.service.IProductDAO;

@RequestMapping("/admin")
@Controller
public class ProductController {

	@Inject
	private ICategoryDAO cateDao;

	@Autowired
	private IProductDAO pDao;

	@Autowired
	private IOptionDAO oDao;
	
	@Autowired
	private ProductMapper productMapper;

	@Autowired
	private String uploadPath;

	private static final Logger logger = LoggerFactory.getLogger(ProductController.class);

	// 상품 등록 GET
	@RequestMapping(value = "/insertProduct", method = RequestMethod.GET)
	public String insertProduct(Model model) throws Exception {
		System.out.println("insertProduct GET 호출");

		List<CategoryDTO> category = cateDao.category();

		System.out.println("insertProduct CategoryDTO ==> " + category);

		model.addAttribute("category", JSONArray.fromObject(category));

		System.out.println("insertProduct JSONArray ==> " + JSONArray.fromObject(category));

		return "/admin/insertProduct";
	}

	// 상품 등록 POST
	@Transactional
	@RequestMapping(value = "/insertProduct", method = RequestMethod.POST)
	public void insertProduct(ProductDTO pDto,
			@RequestParam("category_main") String category_main, @RequestParam("category_mid") String category_mid,
			@RequestParam("category_sub") String category_sub, HttpServletRequest request, HttpServletResponse response,
			RedirectAttributes rttr) throws Exception {

		logger.info("insertProduct ProductImage ============> " + pDto.getImageList());
		
		pDto.setCategory_main(category_main);
		pDto.setCategory_mid(category_mid);
		pDto.setCategory_sub(category_sub);

		System.out.println("insertProduct category_main ==> " + category_main);
		System.out.println("insertProduct category_mid ==> " + category_mid);
		System.out.println("insertProduct category_sub ==> " + category_sub);

		response.setContentType("text/html; charset=UTF-8");
		PrintWriter out = response.getWriter();

		pDao.insertProduct(pDto);

		logger.info("insertProduct POST ProductDTO ==> " + pDto);

		String[] product_option_color = request.getParameterValues("product_option_color");
		String[] product_option_size = request.getParameterValues("product_option_size");
		
		logger.info("insertProduct product_option_color -> " + product_option_color);
		logger.info("insertProduct product_option_size -> " + product_option_size);
		
		int insertOption = 0;
		
		// 옵션, 크기 값 취득 후 삽입
		for(int i = 0; i < product_option_size.length; i++) {
			for(int j = 0; j < product_option_color.length; j++) {
				ProductOptionDTO optionDto = new ProductOptionDTO();
				optionDto.setProduct_no(pDto.getProduct_no());
				optionDto.setProduct_option_size(product_option_size[i]); // 1 2
				if(!product_option_color[j].isEmpty()) {
					optionDto.setProduct_option_color(product_option_color[j]); // 빨강 초록
					insertOption = oDao.insertOption(optionDto);
				}
			}
			
		}

		if (insertOption > 0) {
			out.println("<script>alert('상품등록이 완료되었습니다.'); location.href='/admin/listProduct';</script>");
		} else {
			out.println("<script>alert('상품등록을 실패하였습니다.'); history.go(-1);</script>");
		}

	}

	// 상품 목록 GET
	@RequestMapping(value = "/listProduct", method = RequestMethod.GET)
	public String listProduct(Model model) throws Exception {
		logger.info("listProduct GET 호출");

		List<ProductDTO> list = pDao.listProduct();

		model.addAttribute("list", list);

		return "/admin/listProduct";
	}

	// 상품 상세 정보 GET
	@RequestMapping(value = "/detailProduct", method = RequestMethod.GET)
	public void detailProduct(Model model, @RequestParam("product_no") int product_no) throws Exception {
		logger.info("detailProduct GET 호출");

		ProductDTO pDto = pDao.detailProduct(product_no);

		List<ProductOptionDTO> option = oDao.listOption(product_no);

		logger.info("detailProduct pDto ==> " + pDto);
		logger.info("detailProduct option ==> " + option);

		model.addAttribute("detail", pDto);
		model.addAttribute("option", option);

	}

	// 상품 수정 GET
	@RequestMapping(value = "/modifyProduct", method = RequestMethod.GET)
	public String modifyProduct(Model model, @RequestParam("product_no") int product_no) throws Exception {
		logger.info("modifyProduct GET 호출");
		System.out.println("modifyProduct product_no ==> " + product_no);

		ProductDTO pDto = pDao.detailProduct(product_no);
		List<ProductOptionDTO> option = oDao.listOption(product_no);

		model.addAttribute("modify", pDto);
		model.addAttribute("modifyOption", option);
		model.addAttribute("optionColor", JSONArray.fromObject(option));

		return "/admin/modifyProduct";
	}

	// 상품 수정 POST
	@Transactional
	@RequestMapping(value = "/modifyProduct", method = RequestMethod.POST)
	public void modifyProduct(HttpServletResponse response, HttpServletRequest request, ProductDTO pDto) throws Exception {
		logger.info("modifyProduct POST 호출");
		System.out.println("modifyProduct ProductDTO ==> " + pDto);

		response.setContentType("text/html; charset=UTF-8");
		PrintWriter out = response.getWriter();

		int modifyProduct = pDao.modifyProduct(pDto);
		
		if(modifyProduct == 1 && pDto.getImageList() != null && pDto.getImageList().size() > 0) {
			pDao.deleteImageAll(pDto.getProduct_no());
			
			pDto.getImageList().forEach(attach -> {
				
				attach.setProduct_no(pDto.getProduct_no());
				try {
					pDao.insertProductImage(attach);
				} catch (Exception e) {
					e.printStackTrace();
				}
			});
		}
		
		String[] product_option_color = request.getParameterValues("product_option_color");
		String[] product_option_size = request.getParameterValues("product_option_size");
		
		logger.info("insertProduct product_option_color -> " + product_option_color);
		logger.info("insertProduct product_option_size -> " + product_option_size);
		
		int insertOption = 0;
		
		// 옵션, 크기 값 취득 후 삽입
		for(int i = 0; i < product_option_size.length; i++) {
			for(int j = 0; j < product_option_color.length; j++) {
				ProductOptionDTO optionDto = new ProductOptionDTO();
				optionDto.setProduct_no(pDto.getProduct_no());
				optionDto.setProduct_option_size(product_option_size[i]); // 1 2
				if(!product_option_color[j].isEmpty()) {
					optionDto.setProduct_option_color(product_option_color[j]); // 빨강 초록
					insertOption = oDao.insertOption(optionDto);
				}
			}
			
		}

		if (modifyProduct > 0 && insertOption > 0) {
			out.println("<script>alert('상품수정이 완료되었습니다.'); location.href='/admin/listProduct';</script>");
		} else {
			out.println("<script>alert('상품수정이 실패되었습니다.'); history.go(-1);</script>");
		}

	}

	File imgUploadPath = null;

	// 상품 이미지 등록
	@PostMapping(value = "/uploadProductImg", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<List<ProImageDTO>> uploadProductImg(MultipartFile[] uploadFile) throws Exception {
		logger.info("uploadProductImg POST 호출");

		for (MultipartFile multipartFile : uploadFile) {

			File checkfile = new File(multipartFile.getOriginalFilename());
			logger.info("multipartFile.getOriginalFilename -----> " + multipartFile.getOriginalFilename());
			String type = null;

			type = Files.probeContentType(checkfile.toPath());
			logger.info("MIME TYPE : " + type);

			if (!type.startsWith("image")) {

				List<ProImageDTO> list = null;
				return new ResponseEntity<>(list, HttpStatus.BAD_REQUEST);
			}
		} // for end

		// 날짜 폴더 경로
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

		Date date = new Date();

		String str = sdf.format(date);

		String datePath = str.replace("-", File.separator);
//		String datePath = str.replace("-", "/");
		logger.info("datePath ==> " + datePath);
		
		/* Path imageUploadPath = Paths.get(uploadPath, "product", datePath); */

		imgUploadPath = new File(uploadPath + File.separator + "product" + File.separator + datePath);
		
		/////////////////////////////////////////////////
		File imageUploadPath = new File("/product/" + datePath);
		/////////////////////////////////////////////////
		
//		logger.info("imgUploadPath ==> " + imgUploadPath);
		
		/* 팀 uploadPath */
//		imgUploadPath = new File("/product/" + datePath);
		logger.info("imgUploadPath ==> " + imgUploadPath);
		
		if (imgUploadPath.exists() == false) {
			imgUploadPath.mkdirs();
		}

		// 이미지 정보 담는 객체
		List<ProImageDTO> list = new ArrayList<>();

		for (MultipartFile multipartFile : uploadFile) {
		
			// 이미지 정보 객체
			ProImageDTO piDto = new ProImageDTO();
			
			logger.info("파일 이름 : " + multipartFile.getOriginalFilename());
			logger.info("파일 타입 : " + multipartFile.getContentType());
			logger.info("파일 크기 : " + multipartFile.getSize());
			

			// 파일 이름
			String uploadFileName = multipartFile.getOriginalFilename();
			// 파일 타입
			String uploadFileType = multipartFile.getContentType();

			piDto.setPro_image_name(uploadFileName);
//			piDto.setPro_image_path(uploadPath + File.separator + "\\product\\" + File.separator + imgUploadPath);
//			piDto.setPro_image_path("" + imgUploadPath);
			/////////////////////////////////////////////////
			piDto.setPro_image_path(imageUploadPath.toString());
			/////////////////////////////////////////////////
			piDto.setPro_image_type(uploadFileType);

			// uuid 적용 파일 이름
			String uuid = UUID.randomUUID().toString();

			piDto.setPro_image_uuid(uuid);

			System.out.println("piDto =========================> " + piDto);

			uploadFileName = uuid + "_" + uploadFileName;

			// 파일 위치, 파일 이름을 합친 File 객체
			File saveFile = new File(imgUploadPath, uploadFileName);

			// 파일 저장
			try {
				multipartFile.transferTo(saveFile);

				// 썸네일 생성(ImageIO)
				File thumbnailFile = new File(imgUploadPath, "s_" + uploadFileName);

				BufferedImage bo_image = ImageIO.read(saveFile);

				// 비율
				double ratio = 3;

				// 넓이, 높이
				int width = (int) (bo_image.getWidth() / ratio);
				int height = (int) (bo_image.getHeight() / ratio);

				// 방법 (1)
//				BufferedImage bt_image = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
//				
//				Graphics2D graphic = bt_image.createGraphics();   
//				
//				graphic.drawImage(bo_image, 0, 0, width, height, null);
//				
//				ImageIO.write(bt_image, "jpg", thumbnailFile);

				// 방법 (2)
				Thumbnails.of(saveFile).size(width, height).toFile(thumbnailFile);

			} catch (Exception e) {
				e.printStackTrace();
			}
			list.add(piDto);
		} // for end
		ResponseEntity<List<ProImageDTO>> result = new ResponseEntity<List<ProImageDTO>>(list, HttpStatus.OK);
		System.out.println("result ===============> " + result);
		return result;
	}

	// 상품 이미지 삭제
	@RequestMapping(value = "/deleteFile", method = RequestMethod.POST)
	public ResponseEntity<String> deleteFile(String fileName) {
		logger.info("deleteFile POST 호출");
		logger.info("deleteFile POST fileName ==> " + fileName);

		File file = null;

		try {

			logger.info("deleteFile imgUploadPath ==> " + imgUploadPath);
			// 썸네일 이미지 삭제
			/* file = new File(imgUploadPath + URLDecoder.decode(fileName, "UTF-8")); */
			file = new File(URLDecoder.decode(fileName, "UTF-8"));
			logger.info("deleteFile file ==> " + file);
			file.delete();

			// 원본 이미지 삭제
			String originFileName = file.getAbsolutePath().replace("s_", "");

			logger.info("originFileName ==> " + originFileName);

			file = new File(originFileName);

			file.delete();
		} catch (Exception e) {
			e.printStackTrace();

			return new ResponseEntity<String>("fail", HttpStatus.NOT_IMPLEMENTED);
		}

		return new ResponseEntity<String>("success", HttpStatus.OK);

	}
	
	// 상품 이미지 정보 반환
	@GetMapping(value="/getImageList", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<List<ProImageDTO>> getImageList(int product_no) throws Exception {
		
		logger.info("getImageList 호출 => " + product_no);
		
		return new ResponseEntity<List<ProImageDTO>>(productMapper.getImageList(product_no), HttpStatus.OK);
	}
	
	
	
	
	
	
	
//	@GetMapping(value="/test")
//	public String test() {
//		return "/admin/test";
//	}
//	
//	@PostMapping(value="/test")
//	public void test(ProductDTO pDto, HttpServletRequest request) {
//		System.out.println("TEST product_name -> " + pDto.getProduct_name());
//		String[] arr = request.getParameterValues("product_option_color");
//		String[] size = request.getParameterValues("product_option_size");
//		System.out.println("TEST product_option_color -> " + arr);
//		for(int i = 0; i < arr.length; i++) {
//		System.out.println("TEST product_option_color[] -> " + arr[i]);
//			
//		}
//		
//		for(int i = 0; i < size.length; i++) {
//			System.out.println("TEST product_option_size[] -> " + size[i]);
//			
//		}
//		System.out.println("TEST product_option_size -> " + size);
//		
//		
//	}
	
	
	
	
	


}
