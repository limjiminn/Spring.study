package shop.awesomejump.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import javax.mail.internet.MimeMessage;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import net.sf.json.JSON;
import net.sf.json.JSONArray;
import net.sf.json.JsonConfig;
import shop.awesomejump.domain.CouponMemDTO;
import shop.awesomejump.domain.Criteria;
import shop.awesomejump.domain.MemberDTO;
import shop.awesomejump.domain.PageDTO;
import shop.awesomejump.domain.PointListDTO;
import shop.awesomejump.domain.ProInterestDTO;
import shop.awesomejump.domain.ProductDTO;
import shop.awesomejump.service.IMemberDAO;
import shop.awesomejump.util.FileUtils;

@Controller
public class MemberControllor {

	@Autowired
	private IMemberDAO memberDao;

	@Autowired
	private PasswordEncoder pwdEncoder;
	
	@Autowired
	private JavaMailSender mailSender;

//	@RequestMapping("/registerResult")
//	public String test() {
//		return "/awesomejump/registerResult";
//	}
	
	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String join(MemberDTO mDto, HttpServletRequest request, HttpServletResponse response) throws Exception {

		// System.out.println(mDto.toString());
		mDto.setMem_pw(pwdEncoder.encode(mDto.getMem_pw()));
		mDto.setMem_register_path("DEFAULT");
		mDto.setMem_email_yn("N");
		
		int result = 0;
		result = memberDao.insertMember(mDto);
		
		if (result > 0) {
			System.out.println("회원가입완료");
			
			// 회원가입 쿠폰 발급
			MemberDTO couponDto = new MemberDTO();
			couponDto = memberDao.getMemberByEmail(mDto.getMem_email());
			System.out.println("couponDto = >  " + couponDto);
			memberDao.registerCoupon(couponDto);
			
			Random rnd = new Random();
			int code = rnd.nextInt(99999)+10000;
			String setfrom = "ksoyoun95@naver.com";
			String tomail = mDto.getMem_email(); // 받는 사람 이메일
			String title = "awesomejump 회원가입 인증 이메일 입니다"; // 제목

			try {
				MimeMessage message = mailSender.createMimeMessage();
				MimeMessageHelper messageHelper = new MimeMessageHelper(message,
						true, "UTF-8");

				messageHelper.setFrom(setfrom); // 보내는사람 생략하면 정상작동을 안함
				messageHelper.setTo(tomail); // 받는사람 이메일
				messageHelper.setSubject(title); // 메일제목은 생략이 가능하다
				messageHelper.setText(
						"<html>"
						+ "<body>"
						+ "<img src='https://ifh.cc/g/FZqwaM.png'>"
						+ "<h1>awesomeJump 회원가입 인증 메일 입니다.</h1>"
						+ "<h3>아래 링크클릭시 회원인증이 완료됩니다</h3>"
						+ "<a href='http://localhost:9090/emailAuth?userEmail="
						+ mDto.getMem_email()
						+ "&emailCode="
						+ code
						+ "' style='font-size:20px;'>이메일인증</a>"
						+ "</body>"
						+ "</html>"
						,true); // 메일 내용

				mailSender.send(message);
				
				mDto.setMem_email_yn(String.valueOf(code));
				memberDao.updateCode(mDto);
				
			} catch (Exception e) {
				System.out.println(e);
			}
		}
		
		return "/awesomejump/registerResult";
	}
	
	@RequestMapping("/emailAuth")
	public String emailAuth(@RequestParam("userEmail") String userEmail, @RequestParam("emailCode") String code, Model model) throws Exception {
		
		MemberDTO mDto = new MemberDTO();
		mDto = memberDao.selectMember(userEmail);
		System.out.println("이메일 인증한 mDto" + mDto.toString());
		
		if(mDto.getMem_email_yn().equals(code)) {
			mDto.setMem_email_yn("Y");
			memberDao.updateCode(mDto);
			
			return "/awesomejump/emailAuthSuccess";
		}else if(mDto.getMem_email_yn().equals("Y")) {
			
			model.addAttribute("message","이미 인증된 메일입니다.");
			return "/awesomejump/emailAuthFail";
			
		}else {
			
			model.addAttribute("message","이메일 인증에 실패했습니다");
			return "/awesomejump/emailAuthFail";
		}
	}
	
	@RequestMapping("/email_check")
	public String id_check(String userEmail, HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		String email = request.getParameter("email");
		int message = memberDao.confirmEmail(email);
		
		JSONObject jObj = new JSONObject();
		
		jObj.put("message", message);
		jObj.put("email", userEmail);
		
		response.setContentType("application/x-json; charset=UTF-8"); 
		response.getWriter().print(jObj);
		return null;
	}
	
	@RequestMapping("/nickName_check")
	public String nickName_check(String usernickName, HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		String nickName = request.getParameter("nickName");
		int message = memberDao.confirmNickname(nickName);
		
		JSONObject jObj = new JSONObject();
		
		jObj.put("message", message);
		jObj.put("nickName", usernickName);
		
		response.setContentType("application/x-json; charset=UTF-8"); 
		response.getWriter().print(jObj);
		return null;
	}

	@PostMapping("/loginAdd")
	public String postloginAdd(String email, String nickName, String social, String token,Model model) throws Exception {
		
		int checkEmail = memberDao.confirmEmail(email);
		int checkNickName = memberDao.confirmNickname(nickName);
		System.out.println(token+"토큰값");
		
		//회원가입o
		if(checkEmail == 1) {
			
			MemberDTO member = memberDao.getMemberByEmail(email);
			
			if (member != null) {
				memberDao.updateLastLogin(member);
				MemberDTO ProfileMember = new FileUtils().setMemberProfileImagePath(member);
				SecurityContextHolder.getContext()
				.setAuthentication(new UsernamePasswordAuthenticationToken
					(ProfileMember, "[Protected]", Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER"))));
			}
			
			return "awesomejump/index";
			
		//회원가입x 닉네임중복 o
		}else if(checkEmail == -1 && checkNickName == 1) {
			model.addAttribute("email",email);
			model.addAttribute("nickName", nickName);
			model.addAttribute("token",token);
			model.addAttribute("social",social);
			
			return "awesomejump/loginAdd";
			
		//회원가입 x 닉네임중복 x
		}else {
			MemberDTO mDto = new MemberDTO();
			mDto.setMem_email(email);
			mDto.setMem_nickname(nickName);
			mDto.setMem_pw(token);
			mDto.setMem_register_path(social);
			mDto.setMem_email_yn("Y");
			
			int result = 0;
			result = memberDao.insertMember(mDto);
			
			if (result > 0) {
				System.out.println("회원가입완료");
				
				// 회원가입 쿠폰 발급
				MemberDTO couponDto = new MemberDTO();
				couponDto = memberDao.getMemberByEmail(mDto.getMem_email());
				System.out.println("couponDto = >  " + couponDto);
				memberDao.registerCoupon(couponDto);
				
				MemberDTO memberByEmail = memberDao.getMemberByEmail(email);
				MemberDTO ProfileMember = new FileUtils().setMemberProfileImagePath(memberByEmail);
				
				SecurityContextHolder.getContext()
				.setAuthentication(new UsernamePasswordAuthenticationToken
				(ProfileMember, "[Protected]", Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER"))));
			}
			
			return "awesomejump/index";
		}
		
	}
	
	@GetMapping("/googleLogin")
	public String googleLogin() {
		return "awesomejump/googleLogin";
	}
	
	@PostMapping("/googleLogin")
	@ResponseBody
	public String googleLogin(String email, String nickName, String social, String token,Model model) throws Exception {
		
		int checkEmail = memberDao.confirmEmail(email);
		int checkNickName = memberDao.confirmNickname(nickName);
		System.out.println(token+"토큰값");
		JSONObject json = new JSONObject();
		
		//회원가입o
		if(checkEmail == 1) {
			
			MemberDTO member = memberDao.getMemberByEmail(email);
			
			if (member != null) {
				memberDao.updateLastLogin(member);
				MemberDTO ProfileMember = new FileUtils().setMemberProfileImagePath(member);
				SecurityContextHolder.getContext()
				.setAuthentication(new UsernamePasswordAuthenticationToken
					(ProfileMember, "[Protected]", Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER"))));
			}
			
			json.put("login_result", "/");
			
		//회원가입x 닉네임중복 o
		}else if(checkEmail == -1 && checkNickName == 1) {
			model.addAttribute("email",email);
			model.addAttribute("nickName", nickName);
			model.addAttribute("token",token);
			model.addAttribute("social",social);
			
			json.put("login_result", "/loginAdd");
			json.put("email", email);
			json.put("nickName", nickName);
			json.put("token", token);
			json.put("social", social);
			
		//회원가입 x 닉네임중복 x
		}else {
			MemberDTO mDto = new MemberDTO();
			mDto.setMem_email(email);
			mDto.setMem_nickname(nickName);
			mDto.setMem_pw(token);
			mDto.setMem_register_path(social);
			mDto.setMem_email_yn("Y");
			
			int result = 0;
			result = memberDao.insertMember(mDto);
			
			if (result > 0) {
				System.out.println("회원가입완료");
				MemberDTO memberByEmail = memberDao.getMemberByEmail(email);
				MemberDTO ProfileMember = new FileUtils().setMemberProfileImagePath(memberByEmail);
				
				SecurityContextHolder.getContext()
				.setAuthentication(new UsernamePasswordAuthenticationToken
				(ProfileMember, "[Protected]", Collections.singletonList(new SimpleGrantedAuthority("ROLE_USER"))));
			}
			
			json.put("login_result", "/");
		}
		return json.toJSONString();
	}
	@RequestMapping("/naver_callback")
	public String naver_callback() {
		
		return "awesomejump/naver_callback";
	}
	
	@RequestMapping("/recentView")
	public String recentView(HttpServletRequest request, Model model) throws Exception {
		Cookie[] cookie = request.getCookies();
		if(cookie != null){	
			// 쿠키 정렬 순
	   		/*
			for(int i = 0; i < cookie.length; i++) {
	   			String name = cookie[i].getName();
	   			if(name.indexOf("Name")!=-1){
	   				
	    			String value = cookie[i].getValue();
	    			//String item = URLDecoder.decode(value,"UTF-8");
	    			
	    			System.out.print(name);
	    			System.out.println(value);
	    			}
				}
	   		 */	
   		// 쿠키 역순
	   		ProductDTO pDto = new ProductDTO();
   			List<ProductDTO> recentView = new ArrayList<>(); 
   			
	   		for(int i = cookie.length-1;0<=i;i--) {
	   			String name = cookie[i].getName();
	   			
	   			if(name.indexOf("recent")!=-1){
	   				
	    			String value = cookie[i].getValue();
	    			//String item = URLDecoder.decode(value,"UTF-8");
	    			
	    			//System.out.print(name);
	    			//System.out.println(value);
	    			
	    			pDto = memberDao.recentView(value);
	    			recentView.add(pDto);
	    			
	    			//System.out.println("상품" + pDto);
	    			//System.out.println(i);
	    			
	   			}
			}
	   		model.addAttribute("recentView",recentView);
	   		//System.out.println(recentView.toString());
		}
		return "awesomejump/recentView";
	}
	
	@RequestMapping("/interest")
	public String interest(@AuthenticationPrincipal MemberDTO member, Model model, Criteria cri) throws Exception {
		//System.out.println(member.toString());
		
		//ProductDTO pDto = new ProductDTO();
		List<ProductDTO> pDto = new ArrayList<ProductDTO>();
		pDto = memberDao.interest(member.getMem_no(), cri);
		model.addAttribute("interest",pDto);
		model.addAttribute("mem_no",member.getMem_no());
		//model.addAttribute("pageMaker", new PageDTO(cri, 30));
		int total = memberDao.interestTotalCount(member.getMem_no());
		model.addAttribute("pageMaker", new PageDTO(cri,total));
		return "awesomejump/interest";
	}
	
	@PostMapping("/deleteInter")
	public String deleteInter(int mem_no, int pno, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ProInterestDTO interDto = new ProInterestDTO();
		interDto.setMem_no(mem_no);
		interDto.setProduct_no(pno);
		
		int message = memberDao.deleteInter(interDto);
		
		System.out.println(message);
		
		JSONObject jObj = new JSONObject();
		jObj.put("message", message);
		
		response.setContentType("application/x-json; charset=UTF-8");
		response.getWriter().print(jObj);
		return null;
	}
	
	@Transactional
	@PostMapping("/selDeleteInter")
	public @ResponseBody String selDeleteInter(@RequestParam(value="pno[]") List<Integer> pno, @RequestParam(value="mem_no") int mem_no, HttpServletResponse response) throws Exception {
		int message = 0;
		
		//System.out.println("pno" + pno);
		//System.out.println("pno.size()"+pno.size());
		
		for(int i = 0; i < pno.size(); i++) {
			ProInterestDTO interDto = new ProInterestDTO();
			interDto.setMem_no(mem_no);
			interDto.setProduct_no(pno.get(i));
			
			message = memberDao.deleteInter(interDto);
			if(message != 1) {
				System.out.println("관심상품 삭제 실패 pno = " +pno.get(i));
			}
		}
		JSONObject jObj = new JSONObject();
		jObj.put("message", message);
		
		response.setContentType("application/x-json; charset=UTF-8");
		response.getWriter().print(jObj);
		return null;
		
		
		}
	@RequestMapping("/coupon")
	public String coupon(@AuthenticationPrincipal MemberDTO member, Model model) throws Exception {
		int total = memberDao.couponTotal(member.getMem_no());
		model.addAttribute("total", total);
		
		// 사용가능
		List<CouponMemDTO> p_couponList = new ArrayList<CouponMemDTO>();
		
		CouponMemDTO p_cDto = new CouponMemDTO();
		
		p_cDto.setMem_no(member.getMem_no());
		
		p_couponList = memberDao.couponN(p_cDto);
		
		model.addAttribute("p_couponList", p_couponList);
		
		// 사용 불가능
		List<CouponMemDTO> imp_couponList = new ArrayList<CouponMemDTO>();
		
		CouponMemDTO imp_cDto = new CouponMemDTO();
		
		imp_cDto.setMem_no(member.getMem_no());
		
		imp_couponList = memberDao.couponY(imp_cDto);
		
		model.addAttribute("imp_couponList", imp_couponList);
		return "/awesomejump/coupon";
	}
	
	@RequestMapping("/point")
	public String point(@AuthenticationPrincipal MemberDTO member, Model model) throws Exception {
		
		int mem_point = memberDao.selPoint(member.getMem_no());
		model.addAttribute("mem_point", mem_point);
		
		List<PointListDTO> pointList = new ArrayList<PointListDTO>();
		pointList = memberDao.selPointList(member.getMem_no());
		
		model.addAttribute("pointList", pointList);
		return "/awesomejump/point";
	}
	
	@PostMapping("/point")
	public @ResponseBody List<PointListDTO> point(@RequestParam(value="startNum") int startNum, @AuthenticationPrincipal MemberDTO member, HttpServletResponse response) throws Exception{
		int cnt = 9;
		startNum = startNum+1;
		
		List<PointListDTO> addPointList = new ArrayList<PointListDTO>();
		addPointList = memberDao.selAddPointList(member.getMem_no(), startNum, cnt);
		System.out.println("확인 => " + addPointList);
		System.out.println("확인2 =>" + addPointList.size());
		JSONObject obj = new JSONObject();
//		
//		try {
//			JSONArray jArray = new JSONArray();
//			for(int i = 0; i < addPointList.size(); i++) {
//				JSONObject sObject = new JSONObject();
//				sObject.put("order_info_name", addPointList.get(i).getOrder_info_name());
//				sObject.put("order_info_price", addPointList.get(i).getOrder_info_price());
//				sObject.put("point_amount", addPointList.get(i).getPoint_amount());
//				sObject.put("point_au", addPointList.get(i).getPoint_au());
//				sObject.put("point_date", addPointList.get(i).getPoint_date());
//				jArray.add(sObject);
//			}
//			obj.put("result", jArray);
//				
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
//		obj.put("addPointList", addPointList);
//		response.setContentType("application/x-json; charset=UTF-8");
//		response.getWriter().print(obj);

		return addPointList;
	}
	
	@RequestMapping("/forgotPassword")
	public String getForgotPassword() {
		
		
		return "/awesomejump/forgotPassword";
	}
	
	@Transactional
	@PostMapping("/forgotPassword")
	public @ResponseBody String postForgotPassword(@RequestParam(value="email") String email, HttpServletResponse response) throws Exception {
		
		JSONObject jObj = new JSONObject();
		String emailResult = "";
		MemberDTO mDto = memberDao.selectMember(email);
		if(mDto == null) {
			
			emailResult = "일치하는 회원 정보가 없습니다.";
			jObj.put("message", emailResult);
			jObj.put("result", 0);
			
			response.setContentType("application/x-json; charset=UTF-8");
			response.getWriter().print(jObj);
			return null;
			
		}else if(!mDto.getMem_register_path().equals("DEFAULT")) {
			
			emailResult = "소셜로 로그인한 회원입니다.";
			jObj.put("message", emailResult);
			jObj.put("result", 1);
			
			response.setContentType("application/x-json; charset=UTF-8");
			response.getWriter().print(jObj);
			return null;
			
		}else {
		
		String setfrom = "ksoyoun95@naver.com";
		String tomail = email; // 받는 사람 이메일
		String title = "awesomejump 임시 비밀번호 입니다"; // 제목
		
		char[] charSet = new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', 
				'9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 
				'L', 'M', 'N', 'O', 'P', 'Q'}; 
		
		int idx = 0; 
		StringBuffer sb = new StringBuffer(); 
		//System.out.println("charSet.length :::: "+charSet.length); 
		for (int i = 0; i < 15; i++) {
			idx = (int) (charSet.length * Math.random()); 
			//System.out.println("idx :::: "+idx); 
			sb.append(charSet[idx]);
		}
		System.out.println("임시 비밀번호 ==> " +sb);
			
		try {
			MimeMessage message = mailSender.createMimeMessage();
			MimeMessageHelper messageHelper = new MimeMessageHelper(message,
					true, "UTF-8");

			messageHelper.setFrom(setfrom); // 보내는사람 생략하면 정상작동을 안함
			messageHelper.setTo(tomail); // 받는사람 이메일
			messageHelper.setSubject(title); // 메일제목은 생략이 가능하다
			messageHelper.setText(
					"<html>"
					+ "<body>"
					+ "<img src='https://ifh.cc/g/FZqwaM.png'>"
					+ "<h1>awesomeJump 임시비밀번호 입니다.</h1>"
					+ "<h3>임시비밀번호 : " + sb + "</h3>"
					+ "<h3>로그인 후 '마이페이지 -> 회원정보 -> 비밀번호 변경'에서 비밀번호를 재설정 해주세요</h3>"
					+ "</body>"
					+ "</html>"
					,true); // 메일 내용

			mailSender.send(message);
			
			String password = pwdEncoder.encode(sb);
			System.out.println("암호화 한 pw ==> "+ password);
			memberDao.updatePassword(email,password);
			
			
		} catch (Exception e) {
			System.out.println(e);
		}
		emailResult = "이메일로 임시 비밀번호가 전송되었습니다.";
		jObj.put("message", emailResult);
		jObj.put("result", 2);
		
		response.setContentType("application/x-json; charset=UTF-8");
		response.getWriter().print(jObj);
		return null;
		
		}
	}
}
