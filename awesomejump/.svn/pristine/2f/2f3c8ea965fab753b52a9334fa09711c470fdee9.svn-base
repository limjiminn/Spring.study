package shop.awesomejump.controller;

import java.sql.SQLIntegrityConstraintViolationException;
import java.util.List;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import shop.awesomejump.domain.CartDTO;
import shop.awesomejump.domain.CategoryDTO;
import shop.awesomejump.domain.MemberDTO;
import shop.awesomejump.domain.ProImageDTO;
import shop.awesomejump.domain.ProInterestDTO;
import shop.awesomejump.domain.ProductDTO;
import shop.awesomejump.domain.ProductOptionDTO;
import shop.awesomejump.mapper.CategoryProductMapper;
import shop.awesomejump.mapper.MemProductMapper;
import shop.awesomejump.mapper.ProductMapper;
import shop.awesomejump.service.ICartDAO;
import shop.awesomejump.service.ICategoryDAO;
import shop.awesomejump.service.ICategoryProductDAO;
import shop.awesomejump.service.IMemDetailProductDAO;
import shop.awesomejump.service.IOptionDAO;
import shop.awesomejump.service.IProductDAO;

@Controller
public class MemCategoryController {

	 @Inject 
	 private ICategoryDAO categoryDao;
	 @Autowired 
	 private ICategoryProductDAO categoryproductDao;
	 
	 @Autowired
	 private IMemDetailProductDAO memdetailproductDao;
	 
	 @Autowired
	 private IOptionDAO optionDao;
	 
	 @Autowired
	private String uploadPath;
	 
	 @Autowired
	private ICartDAO cartDao;
	 
	 
	 @Autowired
	private MemProductMapper memproductmapper;
	 
	 @Autowired
	 private CategoryProductMapper categoryproductmapper;
			

	@Autowired
	private ProductMapper productMapper;
	 
	 @Autowired
	 private IProductDAO productDao;
	 
	 
      /*
       * @GetMapping("/category") public String categoryList(Model model) {
       * 
       * return "/awesomejump/category"; }
       */
    
	 private static final Logger logger = LoggerFactory.getLogger(ProductController.class);

   @GetMapping("/category")
   public String categoryProductList(Model model) throws Exception {
       List<CategoryDTO> category = null;
       category = categoryDao.category();
       
       // 카테고리에 해당하는 상품 목록만 추출
       List<ProductDTO> product = null;
	   product = categoryproductDao.categoryAndProduct();
	   System.out.println("categoryProductList(product) ===> 모델에 담기 전"+ product);
	   
       
       model.addAttribute("category", category);
       model.addAttribute("product", product);
       System.out.println(category);
       System.out.println("categoryProductList(product) ===> 모델에 담은 후"+product);
       return "/awesomejump/category";
   }
 
   
   
   @GetMapping("/categoryMain")
   public String categoryMain(Model model, @RequestParam("category_main") int category_main) throws Exception {
	   List<CategoryDTO> category = null;
	   category = categoryDao.category();
	   
	   List<ProductDTO> product = null;
	   product = categoryproductDao.categoryAndProduct();
	   System.out.println("categoryMain(product) ===> 모델에 담기 전"+ product);
	   
	   List<ProductDTO> mainProduct = null; 
	   mainProduct =
			   categoryproductDao.categoryMainProduct(category_main);
	   
	   System.out.println("categoryMain (category_main) 모델에 담기 전 ===> "+category_main);
	   
	   System.out.println("categoryMain(mainProduct) 모델에 담기 전  ===>  "+mainProduct);
	   
	   model.addAttribute("category", category);
	   model.addAttribute("product", product);
	   model.addAttribute("mainProduct", mainProduct); 
	   
	   System.out.println(category);
	   System.out.println("categoryMain(product) ===> 모델에 담은 후"+product);
	   return "/awesomejump/categoryMain";
   }
   
   
   @GetMapping("/categoryMid")
   public String categoryMid(Model model, @RequestParam("category_mid") int category_mid) throws Exception {
	   List<CategoryDTO> category = null;
	   category = categoryDao.category();
	   
	   List<ProductDTO> product = null;
	   product = categoryproductDao.categoryAndProduct();
	   System.out.println("categoryMid(product) ===> 모델에 담기 전"+ product);
	   
	   List<ProductDTO> midProduct = null; 
	   midProduct =
			   categoryproductDao.categoryMidProduct(category_mid);

	   System.out.println("categoryMid(category_mid) ===> 모델에 담기 전  "+category_mid);
	   
	   System.out.println("모델에 담기 전  mainProduct "+midProduct);
	   
	   model.addAttribute("category", category);
	   model.addAttribute("product", product);
	   model.addAttribute("midProduct", midProduct); 
	   
	   System.out.println(category);
	   System.out.println("categoryMid(product) ===> 모델에 담은 후 "+product);
	   return "/awesomejump/categoryMid";
   }
   
   
   
   @GetMapping("/categorySub")
   public String categorySub(Model model, @RequestParam("category_sub") int category_sub) throws Exception {
	   List<CategoryDTO> category = null;
	   category = categoryDao.category();
	   
	   List<ProductDTO> product = null;
	   product = categoryproductDao.categoryAndProduct();
	   System.out.println("categorySub(product) ===> 모델에 담기 전"+ product);
	   
	   List<ProductDTO> subProduct = null; 
	   subProduct =
			   categoryproductDao.categorySubProduct(category_sub);
	   
	   System.out.println("categorySub(category_main) 모델에 담기 전 ===>  "+category_sub);
	   
	   System.out.println("모델에 담기 전  mainProduct "+subProduct);
	   
	   model.addAttribute("category", category);
	   model.addAttribute("product", product);
	   model.addAttribute("subProduct", subProduct); 
	   
	   System.out.println(category);
	   System.out.println("categorySub(product) ===> 모델에 담은 후 "+product);
	   return "/awesomejump/categorySub";
   }
   
   
   
   
   @GetMapping("/memDetailProduct")
   public String memDetailProduct(Model model, @RequestParam("product_no") int product_no) throws Exception {
	   List<CategoryDTO> category = null;
	   category = categoryDao.category();
	   
	   System.out.println("--------------memdetailproduct product_no ===>>" + product_no);
	   
	   ProductDTO mainProduct = memdetailproductDao.memDetail(product_no);
	   
	   List<ProductOptionDTO> productOption = null;
	   productOption = productDao.selectProductOption(product_no);
	   
	   List<ProductDTO> selectProductOption = null;
	   selectProductOption = optionDao.productOption(product_no);
	   
	   
	   System.out.println("memDetailProduct( productOption) 모델에 담기 전  ===> "+productOption);
	   System.out.println("memDetailProduct( mainProduct) 모델에 담기 전  ===> "+mainProduct);
	   
	   model.addAttribute("category", category);
	   model.addAttribute("mainProduct", mainProduct); 
	   model.addAttribute("productOption", productOption);
	   model.addAttribute("selectProductOption", selectProductOption);
	   
	   
	   System.out.println(category);
	   System.out.println("memDetailProduct (productOption)  ===> 모델에 담은 후"+productOption);
	   System.out.println("memDetailProduct (mainProduct)  ===> 모델에 담은 후"+mainProduct);
	   return "/awesomejump/memDetailProduct";
   }
   

	// 주영 / 상품 이미지 정보 반환
	@GetMapping(value="/getMemImageList", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
	public ResponseEntity<List<ProImageDTO>> getMemImageList(int product_no) throws Exception {
		
		logger.info("MemCategoryController (getMemImageList) 호출 => " + product_no);
		List<ProImageDTO> list = memproductmapper.getMemImageList(product_no);
		System.out.println("The number of product image: "  + list.size());
		
		System.out.println("이미지 정보" + memproductmapper.getMemImageList(product_no));
		
		for(int a = 0; a > list.size(); a++ ) {
			System.out.println(list);
		}
		return new ResponseEntity<List<ProImageDTO>>(memproductmapper.getMemImageList(product_no), HttpStatus.OK);
	}
	
	// 주영 / 상품 장바구니에 담기
	@RequestMapping(value="/cartAdd", method=RequestMethod.POST)
	@ResponseBody
	public boolean cartAdd(@RequestBody CartDTO cart, @AuthenticationPrincipal MemberDTO member, Model model) {
		
		System.out.println("Login User: " + member);
		int memNo = member.getMem_no(); 
		cart.setMem_no(memNo);
		
		System.out.println( cart );
		
		System.out.println(cart.getMem_no());
		
		int productCart = 0;
		int count = 0;
		try {
			//장바구니에 기존 상품이 있는지 검사
			count = cartDao.countCart(cart);
			if (count == 0) {
				//상품이 없으면 insert
				productCart = memdetailproductDao.insertProductCart(cart);
			} else {
				// 상품이 있으면 update
				cartDao.updateCart(cart);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		model.addAttribute("productCart", productCart);
		return true;
	}
	
	// 주영 / 관심상품 1개 등록
	@RequestMapping(value="/interestInsertMember", method=RequestMethod.POST)
	@ResponseBody
	public boolean interestInsertMember(@RequestBody ProInterestDTO interest, 
										@AuthenticationPrincipal MemberDTO member,
										Model model ) throws Exception {
		
		System.out.println("Login User: " + member);
	       int memNo = member.getMem_no(); 
	       		interest.setMem_no(memNo);
	       System.out.println("interestInsertMember ===> setMem_no" + interest.toString());
	       
	       int product =  interest.getProduct_no();
	       		interest.setProduct_no(product);
	       System.out.println("interestInsertMember ===> setProduct_no" + interest.toString());
	       
	       int productInsert = 0;
			   try {
				 // 관심상품에 상품이있는지
				   productInsert = memdetailproductDao.interestInsertMember(interest); 
				   System.out.println("MemCategoryController productInsert (Try 안) : " + productInsert);
		     		
				} catch(DuplicateKeyException | SQLIntegrityConstraintViolationException e) {
		     			// 관심 상품이 있으면 delete
		     			productInsert = memdetailproductDao.interestDeleteMember(interest);
		     			System.out.println("MemCategoryController productInsert (DuplicateKeyException 안) : " + productInsert);
				} catch(Exception e) {
					e.printStackTrace();
					
				}
			   System.out.println("MemCategoryController productInsert 외부 : " + productInsert);
	       
	       model.addAttribute("productInsert", productInsert);
		
		return true;
	}
	
}